// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YoutubeStuff.Models;

#nullable disable

namespace YoutubeStuff.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240508143325_UploadBatch_CreatedAt")]
    partial class UploadBatch_CreatedAt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.FileSaved", b =>
                {
                    b.Property<string>("FileSavedId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("file_saved_id");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("file_data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<int>("FileType")
                        .HasColumnType("int")
                        .HasColumnName("file_type");

                    b.Property<int?>("ProccessedFileProccessedFileId")
                        .HasColumnType("int")
                        .HasColumnName("Proccessed_File_Proccessed_File_Id");

                    b.Property<int?>("UploadedFileUploadedFileId")
                        .HasColumnType("int")
                        .HasColumnName("Uploaded_File_uploaded_file_id");

                    b.HasKey("FileSavedId");

                    b.HasIndex("ProccessedFileProccessedFileId");

                    b.HasIndex("UploadedFileUploadedFileId");

                    b.ToTable("File_Saved", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.PartsUsed", b =>
                {
                    b.Property<int>("ProccessedFileId")
                        .HasColumnType("int")
                        .HasColumnName("Proccessed_File_Id");

                    b.Property<int>("PartOrder")
                        .HasColumnType("int")
                        .HasColumnName("Part_Order");

                    b.Property<int?>("ProccessedFileProccessedFileId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Proccessed_File_Proccessed_File_Id");

                    b.Property<int?>("UploadPartsPartId")
                        .HasColumnType("int")
                        .HasColumnName("Upload_parts_part_id");

                    b.HasKey("ProccessedFileId", "PartOrder")
                        .HasName("Parts_Used_pk");

                    b.HasIndex("ProccessedFileProccessedFileId");

                    b.HasIndex("UploadPartsPartId");

                    b.ToTable("Parts_Used", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.ProccessedFile", b =>
                {
                    b.Property<int>("ProccessedFileId")
                        .HasColumnType("int")
                        .HasColumnName("Proccessed_File_Id");

                    b.HasKey("ProccessedFileId");

                    b.ToTable("Proccessed_File", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadBatch", b =>
                {
                    b.Property<int>("UploadBatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("upload_batch_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadBatchId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<int?>("SiteType")
                        .HasColumnType("int")
                        .HasColumnName("site_type");

                    b.Property<int>("UploadType")
                        .HasColumnType("int")
                        .HasColumnName("upload_type");

                    b.HasKey("UploadBatchId");

                    b.ToTable("Upload_Batch", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadedFile", b =>
                {
                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_file_id");

                    b.Property<int?>("UploadBatchId")
                        .HasColumnType("int")
                        .HasColumnName("upload_batch_id");

                    b.HasKey("UploadedFileId");

                    b.HasIndex("UploadBatchId");

                    b.ToTable("Uploaded_File", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadPart", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnType("int")
                        .HasColumnName("part_id");

                    b.Property<int>("EndTime")
                        .HasColumnType("int")
                        .HasColumnName("end_time");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("part_name");

                    b.Property<int>("PartType")
                        .HasColumnType("int")
                        .HasColumnName("part_type");

                    b.Property<int>("StartTime")
                        .HasColumnType("int")
                        .HasColumnName("start_time");

                    b.Property<int?>("UploadedFileId")
                        .HasColumnType("int")
                        .HasColumnName("uploaded_file_id");

                    b.HasKey("PartId")
                        .HasName("Upload_parts_pk");

                    b.HasIndex("UploadedFileId");

                    b.ToTable("Upload_parts", (string)null);
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.FileSaved", b =>
                {
                    b.HasOne("YoutubeStuff.Models.Music_Module.ProccessedFile", "ProccessedFileProccessedFile")
                        .WithMany("FileSaveds")
                        .HasForeignKey("ProccessedFileProccessedFileId")
                        .HasConstraintName("File_Saved_Proccessed_File");

                    b.HasOne("YoutubeStuff.Models.Music_Module.UploadedFile", "UploadedFileUploadedFile")
                        .WithMany("FileSaveds")
                        .HasForeignKey("UploadedFileUploadedFileId")
                        .HasConstraintName("File_Saved_Uploaded_File");

                    b.Navigation("ProccessedFileProccessedFile");

                    b.Navigation("UploadedFileUploadedFile");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.PartsUsed", b =>
                {
                    b.HasOne("YoutubeStuff.Models.Music_Module.ProccessedFile", "ProccessedFile")
                        .WithMany("PartsUsedProccessedFiles")
                        .HasForeignKey("ProccessedFileId")
                        .IsRequired()
                        .HasConstraintName("Parts_Used_Proccessed_File_Original_File");

                    b.HasOne("YoutubeStuff.Models.Music_Module.ProccessedFile", "ProccessedFileProccessedFile")
                        .WithMany("PartsUsedProccessedFileProccessedFiles")
                        .HasForeignKey("ProccessedFileProccessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Parts_Used_Proccessed_File_Part");

                    b.HasOne("YoutubeStuff.Models.Music_Module.UploadPart", "UploadPartsPart")
                        .WithMany("PartsUseds")
                        .HasForeignKey("UploadPartsPartId")
                        .HasConstraintName("Parts_Used_Upload_parts");

                    b.Navigation("ProccessedFile");

                    b.Navigation("ProccessedFileProccessedFile");

                    b.Navigation("UploadPartsPart");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadedFile", b =>
                {
                    b.HasOne("YoutubeStuff.Models.Music_Module.UploadBatch", "UploadBatch")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploadBatchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Uploaded_File_Upload_Batch");

                    b.Navigation("UploadBatch");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadPart", b =>
                {
                    b.HasOne("YoutubeStuff.Models.Music_Module.UploadedFile", "UploadedFile")
                        .WithMany("UploadParts")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("upload_parts_Uploaded_File");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.ProccessedFile", b =>
                {
                    b.Navigation("FileSaveds");

                    b.Navigation("PartsUsedProccessedFileProccessedFiles");

                    b.Navigation("PartsUsedProccessedFiles");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadBatch", b =>
                {
                    b.Navigation("UploadedFiles");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadedFile", b =>
                {
                    b.Navigation("FileSaveds");

                    b.Navigation("UploadParts");
                });

            modelBuilder.Entity("YoutubeStuff.Models.Music_Module.UploadPart", b =>
                {
                    b.Navigation("PartsUseds");
                });
#pragma warning restore 612, 618
        }
    }
}
