@page "/counter"
@using VideoLibrary;
@using YoutubeStuff.Services.Misc.FileService;
@using YoutubeStuff.Services.Misc.YtFileService;
@inject IYtFileService YtFileService;

<PageTitle>Counter</PageTitle>

<button @onclick=download>Download Test</button>
<input type="text" @bind-value=url/>
<h3>@text</h3>

<CustomProgressBar downloadProgress="_downloadProgress" downloadSize="_downloadSize" bottomMessage="_bottomMessage" filesFinished="_filesFinished" filesTotal="_filesTotal" @ref=_customProgressBar></CustomProgressBar>




@code {
    private CustomProgressBar _customProgressBar;

    public string url = "https://www.youtube.com/watch?v=zGDzdps75ns";
    public string text = null;
    public bool isDownloadStart = false;

    private long? _downloadProgress = 0l;
    private long? _downloadSize = 100l;
    private long? _filesFinished = 0;
    private long? _filesTotal = 1;
    private string? _bottomMessage = "";

    protected override void OnInitialized()
    {
        YtFileService.DownloadService.statusMessageChanged += HandleBottomMessage;
        YtFileService.DownloadService.currentFileReadChanged += HandleDownloadSize;
        YtFileService.DownloadService.currentFileByteChanged += HandleDownloadProgress;
        YtFileService.DownloadService.totalFileAmountChanged += HandleFilesTotal;
        YtFileService.DownloadService.totaltFileReadChanged += HandleFilesFinished;

    }

    public void Dispose()
    {
        YtFileService.DownloadService.statusMessageChanged -= HandleBottomMessage;
        YtFileService.DownloadService.currentFileReadChanged -= HandleDownloadSize;
        YtFileService.DownloadService.currentFileByteChanged -= HandleDownloadProgress;
        YtFileService.DownloadService.totalFileAmountChanged -= HandleFilesTotal;
        YtFileService.DownloadService.totaltFileReadChanged -= HandleFilesFinished;
    }

    private void HandleDownloadProgress()
    {
        _downloadProgress = YtFileService.DownloadService.GetCurrentFileRead();
        _customProgressBar.UpdateDownloadProgress(_downloadProgress);
        InvokeAsync(StateHasChanged);
    }

    private void HandleDownloadSize()
    {
        _downloadSize = YtFileService.DownloadService.GetCurrentFileByte();
        _customProgressBar.UpdateDownloadSize(_downloadSize);
        InvokeAsync(StateHasChanged);
    }

    private void HandleFilesFinished()
    {
        _filesFinished = YtFileService.DownloadService.GetTotaltFileRead();
        _customProgressBar.UpdateFilesProgress(_filesFinished);
        InvokeAsync(StateHasChanged);
    }

    private void HandleFilesTotal()
    {
        _filesTotal = YtFileService.DownloadService.GetTotalFileAmount();
        _customProgressBar.UpdateFilesAmount(_filesTotal);
        InvokeAsync(StateHasChanged);
    }

    private void HandleBottomMessage()
    {
        _bottomMessage = YtFileService.DownloadService.GetCurrentStatusMessage();
        _customProgressBar.UpdateBottomMessage(_bottomMessage);
        InvokeAsync(StateHasChanged);
    }


    public async Task download()
    {
        text = await YtFileService.DownloadAndConvertSingle(url);
    }


}

